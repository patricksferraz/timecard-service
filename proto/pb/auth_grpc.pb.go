// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthKeycloakAclClient is the client API for AuthKeycloakAcl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthKeycloakAclClient interface {
	FindClaimsByToken(ctx context.Context, in *FindClaimsByTokenRequest, opts ...grpc.CallOption) (*Claims, error)
}

type authKeycloakAclClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthKeycloakAclClient(cc grpc.ClientConnInterface) AuthKeycloakAclClient {
	return &authKeycloakAclClient{cc}
}

func (c *authKeycloakAclClient) FindClaimsByToken(ctx context.Context, in *FindClaimsByTokenRequest, opts ...grpc.CallOption) (*Claims, error) {
	out := new(Claims)
	err := c.cc.Invoke(ctx, "/github.com.c_4u.AuthKeycloakAcl/FindClaimsByToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthKeycloakAclServer is the server API for AuthKeycloakAcl service.
// All implementations must embed UnimplementedAuthKeycloakAclServer
// for forward compatibility
type AuthKeycloakAclServer interface {
	FindClaimsByToken(context.Context, *FindClaimsByTokenRequest) (*Claims, error)
	mustEmbedUnimplementedAuthKeycloakAclServer()
}

// UnimplementedAuthKeycloakAclServer must be embedded to have forward compatible implementations.
type UnimplementedAuthKeycloakAclServer struct {
}

func (UnimplementedAuthKeycloakAclServer) FindClaimsByToken(context.Context, *FindClaimsByTokenRequest) (*Claims, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindClaimsByToken not implemented")
}
func (UnimplementedAuthKeycloakAclServer) mustEmbedUnimplementedAuthKeycloakAclServer() {}

// UnsafeAuthKeycloakAclServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthKeycloakAclServer will
// result in compilation errors.
type UnsafeAuthKeycloakAclServer interface {
	mustEmbedUnimplementedAuthKeycloakAclServer()
}

func RegisterAuthKeycloakAclServer(s grpc.ServiceRegistrar, srv AuthKeycloakAclServer) {
	s.RegisterService(&AuthKeycloakAcl_ServiceDesc, srv)
}

func _AuthKeycloakAcl_FindClaimsByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindClaimsByTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthKeycloakAclServer).FindClaimsByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.c_4u.AuthKeycloakAcl/FindClaimsByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthKeycloakAclServer).FindClaimsByToken(ctx, req.(*FindClaimsByTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthKeycloakAcl_ServiceDesc is the grpc.ServiceDesc for AuthKeycloakAcl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthKeycloakAcl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.c_4u.AuthKeycloakAcl",
	HandlerType: (*AuthKeycloakAclServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindClaimsByToken",
			Handler:    _AuthKeycloakAcl_FindClaimsByToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
